package com.sri.photoapp.security;

import javax.servlet.Filter;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
@EnableWebSecurity
public class WebSecurity extends WebSecurityConfigurerAdapter{

	@Value("${gateway.ip}")
	String ipaddress;
	
	@Override
	protected void configure(HttpSecurity http) throws Exception {
	
		http
		.csrf()
		.disable();
		
		http
		.authorizeRequests()
		.antMatchers("/users/**","/h2-console/**")
		.hasIpAddress(ipaddress)
		.and()
		.addFilter(getAuthenticationFilter());		
//		.permitAll();
		
//		 to see h2-console by passing the security 
		
		http
		.headers()
		.frameOptions()
		.disable();
	}

	private Filter getAuthenticationFilter() throws Exception {
		
		AuthenticationFilter authenticationFilter = new AuthenticationFilter();
		authenticationFilter.setAuthenticationManager(authenticationManager());
		return authenticationFilter;
	}

	@Bean
	public PasswordEncoder encoder() {
	    return new BCryptPasswordEncoder();
	}
	
	
}
