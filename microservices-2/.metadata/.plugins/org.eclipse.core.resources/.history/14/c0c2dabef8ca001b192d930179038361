package com.sri.photoapp.ui.controllers;

import java.net.URI;
import java.util.List;

import javax.validation.Valid;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpStatus;
import org.springframework.http.RequestEntity;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.netflix.ribbon.proxy.annotation.Http.HttpMethod;
import com.sri.photoapp.ui.controllers.model.UserEntity;
import com.sri.photoapp.ui.controllers.model.UserModel;
import com.sri.photoapp.ui.model.AlbumResponseModel;
import com.sri.photoapp.ui.model.CreateUserResponseModel;
import com.sri.photoapp.ui.model.UserResponseModel;

import net.bytebuddy.implementation.bind.ParameterLengthResolver;

@RestController
@RequestMapping("/users")
public class UsersController {

	private static final Logger log = LoggerFactory.getLogger(UsersController.class);

	@Autowired
	private Environment env;

	@Autowired
	private UserService userService;

	@Autowired
	private PasswordEncoder passwordEncoder;

	private URI albumsUrl;

	@GetMapping("/status/check")
	String status() {

		log.info("Coming from api users");

		return "Working from  ! " + Integer.parseInt(env.getProperty("local.server.port")) + " "
				+ env.getProperty("test.flag");
	}

	@PostMapping()
	ResponseEntity createUser(@Valid @RequestBody UserModel user) {

		UserEntity userEntity = new UserEntity();
		userEntity.setFirstName(user.getFirstName());
		userEntity.setLastName(user.getLastName());
		userEntity.setEmail(user.getEmail());
		// encode
		userEntity.setEncryptedPassword(passwordEncoder.encode(user.getPassword()));

		UserEntity createUser = userService.createUser(userEntity);

		ModelMapper modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);

		CreateUserResponseModel createUserResponseModel = modelMapper.map(createUser, CreateUserResponseModel.class);

		return new ResponseEntity<CreateUserResponseModel>(createUserResponseModel, HttpStatus.CREATED);
	}

	@GetMapping("/{userId}")
	public ResponseEntity<UserResponseModel> getUserById(@PathVariable("userId") String userId) {

		UserEntity userByUserId = userService.getUserByUserId(userId);

		UserResponseModel returnValue = new ModelMapper().map(userByUserId, UserResponseModel.class);

//		List<AlbumResponseModel> albums = Arrays
//				.asList(new AlbumResponseModel("1", userId, "never enough", "Loren Alred"));
//		returnValue.setAlbums(albums);

		RestTemplate restTemplate = new RestTemplate();

//		ResponseEntity<List<AlbumResponseModel>> forEntity = restTemplate.exchange(albumsUrl,HttpMethod.GET,null,
//				new ParameterizedTypeReference<List<AlbumResponseModel>>() {
//				});
		
//		restTemplate.exchange(albumsUrl,HttpMethod.GET, null,
//				new ParameterizedTypeReference<List<AlbumResponseModel>>() {
//				});
		
//		restTemplate.exchange(albumsUrl, HttpMethod.GET, null, new ParameterizedTypeReference<AlbumResponseModel>() {});
		
		ParameterizedTypeReference<List<AlbumResponseModel>> parameterizedTypeReference = new   ParameterizedTypeReference<List<AlbumResponseModel>>() {};
		
		RequestEntity requestEntity = new RequestEntity<>(HttpMethod.class, albumsUrl);
		restTemplate.exchange(requestEntity , parameterizedTypeReference);

//		ResponseEntity<List<AlbumResponseModel>> actualExample =    restTemplate.exchange(albumsUrl, HttpMethod.GET, null, parameterizedTypeReference);
		
//		if (forEntity.hasBody()) {
//			returnValue.setAlbums(forEntity.getBody());
//		}

		return ResponseEntity.status(HttpStatus.OK).body(returnValue);
	}
}
